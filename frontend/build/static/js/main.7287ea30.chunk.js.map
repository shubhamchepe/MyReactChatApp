{"version":3,"sources":["Context/ChatProvider.js","components/Authentication/Login.js","components/Authentication/Signup.js","Pages/Homepage.js","components/SingleChat.js","config/ChatLogics.js","components/miscellaneous/ProfileModal.js","components/ScrollableChat.js","components/userAvatar/UserBadgeItem.js","components/userAvatar/UserListItem.js","components/miscellaneous/UpdateGroupChatModal.js","components/Chatbox.js","components/ChatLoading.js","components/miscellaneous/GroupChatModal.js","components/MyChats.js","components/miscellaneous/SideDrawer.js","Pages/Chatpage.js","firebase.js","App.js","reportWebVitals.js","index.js"],"names":["ChatContext","createContext","ChatState","useContext","ChatProvider","children","useState","selectedChat","setSelectedChat","user","setUser","notification","setNotification","chats","setChats","history","useHistory","useEffect","userInfo","JSON","parse","localStorage","getItem","push","Provider","value","Login","show","setShow","toast","useToast","email","setEmail","password","setPassword","loading","setLoading","submitHandler","a","title","status","duration","isClosable","position","config","headers","axios","post","data","setItem","stringify","description","response","message","spacing","id","isRequired","color","base","md","type","placeholder","onChange","e","target","size","width","h","onClick","backgroundColor","style","marginTop","isLoading","variant","colorScheme","Signup","handleClick","name","setName","confirmpassword","setConfirmpassword","pic","setPic","picLoading","setPicLoading","console","log","p","accept","pics","undefined","FormData","append","fetch","method","body","then","res","json","url","toString","catch","err","postDetails","files","Homepage","socket","selectedChatCompare","styles","css","maxW","centerContent","display","flexDirection","alignItems","justifyContent","bg","w","minH","m","borderRadius","fontSize","fontFamily","isFitted","mt","mb","isSameSenderMargin","messages","i","userId","length","sender","_id","isSameSender","isLastMessage","isSameUser","getSender","loggedUser","users","ProfileModal","useDisclosure","isOpen","onOpen","onClose","d","icon","View","isCentered","flexDir","boxSize","src","alt","ScrollableChat","map","label","placement","hasArrow","mr","cursor","marginLeft","padding","maxWidth","content","UserBadgeItem","handleFunction","admin","px","py","Close","pl","UserListItem","_hover","background","UpdateGroupChatModal","fetchMessages","fetchAgain","setFetchAgain","groupChatName","setGroupChatName","search","setSearch","searchResult","setSearchResult","renameloading","setRenameLoading","handleSearch","query","Authorization","token","get","handleRename","put","chatId","chatName","handleAddUser","user1","find","u","groupAdmin","handleRemove","flexWrap","pb","ml","SingleChat","setMessages","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","emit","sendMessage","event","key","create","timeout","io","on","newMessageRecieved","chat","includes","ArrowBack","isGroupChat","toUpperCase","overflowY","alignSelf","margin","className","onKeyDown","options","marginBottom","lastTypingTime","Date","getTime","setTimeout","Chatbox","borderWidth","ChatLoading","height","GroupChatModal","selectedUsers","setSelectedUsers","handleSubmit","delUser","filter","sel","slice","userToAdd","MyChats","setLoggedUser","fetchChats","flexGrow","lg","Add","al","marginRight","isTruncated","latestMessage","substring","SideDrawer","loadingChat","setLoadingChat","accessChat","c","count","effect","Effect","SCALE","Bell","notif","n","as","Button","rightIcon","ChevronDown","removeItem","borderBottomWidth","Chatpage","app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","getAnalytics","getMessaging","App","path","component","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7287ea30.chunk.js","sourcesContent":["import React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nconst ChatContext = createContext();\n\nconst ChatProvider = ({ children }) => {\n  const [selectedChat, setSelectedChat] = useState();\n  const [user, setUser] = useState();\n  const [notification, setNotification] = useState([]);\n  const [chats, setChats] = useState();\n\n  const history = useHistory();\n\n  useEffect(() => {\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\n    setUser(userInfo);\n\n    if (!userInfo) history.push(\"/\");\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [history]);\n\n  return (\n    <ChatContext.Provider\n      value={{\n        selectedChat,\n        setSelectedChat,\n        user,\n        setUser,\n        notification,\n        setNotification,\n        chats,\n        setChats,\n      }}\n    >\n      {children}\n    </ChatContext.Provider>\n  );\n};\n\nexport const ChatState = () => {\n  return useContext(ChatContext);\n};\n\nexport default ChatProvider;\n","import { Button } from \"@chakra-ui/button\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { VStack } from \"@chakra-ui/layout\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/react\";\nimport { useHistory } from \"react-router-dom\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\n\n\nconst Login = () => {\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n  const toast = useToast();\n  const [email, setEmail] = useState();\n  const [password, setPassword] = useState();\n  const [loading, setLoading] = useState(false);\n\n  const history = useHistory();\n  const { setUser } = ChatState();\n\n  const submitHandler = async () => {\n    setLoading(true);\n    if (!email || !password) {\n      toast({\n        title: \"Please Fill all the Feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n      return;\n    }\n\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      };\n\n      const { data } = await axios.post(\n        \"/api/user/login\",\n        { email, password },\n        config\n      );\n\n      toast({\n        title: \"Login Successful\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setUser(data);\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      setLoading(false);\n      history.push(\"/chats\");\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n  };\n\n  return (\n    <VStack spacing=\"10px\">\n      <FormControl id=\"email\" isRequired>\n        <FormLabel color={{ base: \"#fff\", md: \"#000\" }}>\n          Email Address\n        </FormLabel>\n        <Input\n          value={email}\n          type=\"email\"\n          placeholder=\"Enter Your Email Address\"\n          onChange={(e) => setEmail(e.target.value)}\n        />\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel color={{ base: \"#fff\", md: \"#000\" }}>Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Enter password\"\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <Button\n        backgroundColor=\"#18E2AB\"\n        color=\"#fff\"\n        width=\"100%\"\n        style={{ marginTop: 15 }}\n        onClick={submitHandler}\n        isLoading={loading}\n      >\n        Login\n      </Button>\n      <Button\n        variant=\"solid\"\n        colorScheme=\"red\"\n        width=\"100%\"\n        onClick={() => {\n          setEmail(\"guest@example.com\");\n          setPassword(\"123456\");\n        }}\n      >\n        Get Guest User Credentials\n      </Button>\n    </VStack>\n  );\n};\n\nexport default Login;\n","import { Button } from \"@chakra-ui/button\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { VStack } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { useHistory } from \"react-router\";\n\nconst Signup = () => {\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n  const toast = useToast();\n  const history = useHistory();\n\n  const [name, setName] = useState();\n  const [email, setEmail] = useState();\n  const [confirmpassword, setConfirmpassword] = useState();\n  const [password, setPassword] = useState();\n  const [pic, setPic] = useState();\n  const [picLoading, setPicLoading] = useState(false);\n\n  const submitHandler = async () => {\n    setPicLoading(true);\n    if (!name || !email || !password || !confirmpassword) {\n      toast({\n        title: \"Please Fill all the Feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n      return;\n    }\n    if (password !== confirmpassword) {\n      toast({\n        title: \"Passwords Do Not Match\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n    console.log(name, email, password, pic);\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      };\n      const { data } = await axios.post(\n        \"/api/user\",\n        {\n          name,\n          email,\n          password,\n          pic,\n        },\n        config\n      );\n      console.log(data);\n      toast({\n        title: \"Registration Successful\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      setPicLoading(false);\n      history.push(\"/chats\");\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n    }\n  };\n\n  const postDetails = (pics) => {\n    setPicLoading(true);\n    if (pics === undefined) {\n      toast({\n        title: \"Please Select an Image!\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n    console.log(pics);\n    if (pics.type === \"image/jpeg\" || pics.type === \"image/png\") {\n      const data = new FormData();\n      data.append(\"file\", pics);\n      data.append(\"upload_preset\", \"chat-app\");\n      data.append(\"cloud_name\", \"dictpfcx5\");\n      fetch(\"https://api.cloudinary.com/v1_1/dictpfcx5\", {\n        method: \"post\",\n        body: data,\n      })\n        .then((res) => res.json())\n        .then((data) => {\n          setPic(data.url.toString());\n          console.log(data.url.toString());\n          setPicLoading(false);\n        })\n        .catch((err) => {\n          console.log(err);\n          setPicLoading(false);\n        });\n    } else {\n      toast({\n        title: \"Please Select an Image!\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n      return;\n    }\n  };\n\n  return (\n    <VStack spacing=\"5px\">\n      <FormControl id=\"first-name\" isRequired>\n        <FormLabel color={{ base: \"#fff\", md: \"#000\" }}>Name</FormLabel>\n        <Input\n          placeholder=\"Enter Your Name\"\n          onChange={(e) => setName(e.target.value)}\n        />\n      </FormControl>\n      <FormControl id=\"email\" isRequired>\n        <FormLabel color={{ base: \"#fff\", md: \"#000\" }}>\n          Email Address\n        </FormLabel>\n        <Input\n          type=\"email\"\n          placeholder=\"Enter Your Email Address\"\n          onChange={(e) => setEmail(e.target.value)}\n        />\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel color={{ base: \"#fff\", md: \"#000\" }}>Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Enter Password\"\n            onChange={(e) => setPassword(e.target.value)}\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel color={{ base: \"#fff\", md: \"#000\" }}>\n          Confirm Password\n        </FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Confirm password\"\n            onChange={(e) => setConfirmpassword(e.target.value)}\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <FormControl id=\"pic\">\n        <FormLabel color={{ base: \"#fff\", md: \"#000\" }}>\n          Upload your Picture\n        </FormLabel>\n        <Input\n          type=\"file\"\n          p={1.5}\n          accept=\"image/*\"\n          onChange={(e) => postDetails(e.target.files[0])}\n        />\n      </FormControl>\n      <Button\n        backgroundColor=\"#18E2AB\"\n        color=\"#fff\"\n        width=\"100%\"\n        style={{ marginTop: 15 }}\n        onClick={submitHandler}\n        isLoading={picLoading}\n      >\n        Sign Up\n      </Button>\n    </VStack>\n  );\n};\n\nexport default Signup;\n","import {\n  Box,\n  Container,\n  Tab,\n  TabList,\n  TabPanel,\n  TabPanels,\n  Tabs,\n  Text\n} from \"@chakra-ui/react\";\nimport { useEffect,useState,useRef } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { Global, css } from \"@emotion/react\";\nimport Login from \"../components/Authentication/Login\";\nimport Signup from \"../components/Authentication/Signup\";\n\n\nfunction Homepage() {\n  const history = useHistory();\n\n\n\n  useEffect(() => {\n    const user = JSON.parse(localStorage.getItem(\"userInfo\"));\n\n    if (user) history.push(\"/chats\");\n  }, [history]);\n\n  return (\n    <>\n      <Global\n        styles={css`\n          html {\n            overflow: hidden;\n          }\n          body {\n            overflow: hidden;\n            height: 100vh;\n          }\n        `}\n      />\n      <Container maxW=\"10xl\" centerContent>\n        <Box\n          display=\"flex\"\n          flexDirection=\"column\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          p={3}\n          bg={{ base: \"#0E2036\", md: \"white\" }} // White background on both mobile and desktop view\n          w={{ base: \"100vw\", md: \"auto\" }} // Full width on mobile view, auto width on desktop view\n          minH={{ base: \"100vh\", md: \"auto\" }} // Full height on mobile view, auto height on desktop view\n          m={{ base: \"10px 0 10px 0\", md: \"40px 0 15px 0\" }} // Adjust margins for different screen sizes\n          borderRadius=\"lg\"\n        >\n          <Text\n            fontSize={{ base: \"5xl\", md: \"4xl\" }}\n            fontFamily=\"Anton\"\n            color={{ base: \"#fff\", md: \"#000\" }}\n          >\n            ONBVN\n          </Text>\n          <Tabs\n            isFitted\n            variant=\"soft-rounded\"\n            w=\"100%\"\n            mt=\"15px\"\n          >\n            <TabList mb=\"1em\">\n              <Tab color={{ base: \"#fff\", md: \"#000\" }}>Login</Tab>\n              <Tab color={{ base: \"#fff\", md: \"#000\" }}>Sign Up</Tab>\n            </TabList>\n            <TabPanels>\n              <TabPanel>\n                <Login />\n              </TabPanel>\n              <TabPanel>\n                <Signup />\n              </TabPanel>\n            </TabPanels>\n          </Tabs>\n        </Box>\n      </Container>\n    </>\n  );\n}\n\nexport default Homepage;\n","import { FormControl } from \"@chakra-ui/form-control\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport Lottie from \"react-lottie\";\nimport animationData from \"../animations/typing.json\";\nimport push from \"push.js\"; \n\nimport io from \"socket.io-client\";\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport { ChatState } from \"../Context/ChatProvider\";\nconst ENDPOINT = \"https://myreactchatapp.onrender.com\"; \nvar socket, selectedChatCompare;\n\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n  const toast = useToast();\n\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\",\n    },\n  };\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\n    ChatState();\n\n  const fetchMessages = async () => {\n    if (!selectedChat) return;\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      setLoading(true);\n\n      const { data } = await axios.get(\n        `/api/message/${selectedChat._id}`,\n        config\n      );\n      setMessages(data);\n      setLoading(false);\n\n      socket.emit(\"join chat\", selectedChat._id);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Messages\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  const sendMessage = async (event) => {\n    if (event.key === \"Enter\" && newMessage) {\n      socket.emit(\"stop typing\", selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`,\n          },\n        };\n        setNewMessage(\"\");\n        const { data } = await axios.post(\n          \"/api/message\",\n          {\n            content: newMessage,\n            chatId: selectedChat,\n          },\n          config\n        );\n        socket.emit(\"new message\", data);\n        setMessages([...messages, data]);\n           push.create(\"Notification Testing\", {\n             body: \"sent you a message\",\n             timeout: 4000,\n           });\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\",\n        });\n      }\n    }\n  };\n\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false));\n\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    fetchMessages();\n\n    selectedChatCompare = selectedChat;\n    // eslint-disable-next-line\n  }, [selectedChat]);\n\n  useEffect(() => {\n    socket.on(\"message recieved\", (newMessageRecieved) => {\n      if (\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\n        selectedChatCompare._id !== newMessageRecieved.chat._id\n      ) {\n        if (!notification.includes(newMessageRecieved)) {\n       \n          // new window.Notification(newMessageRecieved.sender.name, {\n          //   body: \"Sent you message\",\n          //   icon: newMessageRecieved.sender.pic\n          // });\n          console.log(\"Latest Notf\",newMessageRecieved.sender);\n          setNotification([newMessageRecieved, ...notification]);\n          setFetchAgain(!fetchAgain);\n        }\n      } else {\n        setMessages([...messages, newMessageRecieved]);\n      }\n    });\n  });\n\n  const typingHandler = (e) => {\n    setNewMessage(e.target.value);\n\n    if (!socketConnected) return;\n\n    if (!typing) {\n      setTyping(true);\n      socket.emit(\"typing\", selectedChat._id);\n    }\n    let lastTypingTime = new Date().getTime();\n    var timerLength = 3000;\n    setTimeout(() => {\n      var timeNow = new Date().getTime();\n      var timeDiff = timeNow - lastTypingTime;\n      if (timeDiff >= timerLength && typing) {\n        socket.emit(\"stop typing\", selectedChat._id);\n        setTyping(false);\n      }\n    }, timerLength);\n  };\n\n  return (\n    <>\n      {selectedChat ? (\n        <>\n          <Text\n            fontSize={{ base: \"28px\", md: \"30px\" }}\n            pb={3}\n            px={2}\n            w=\"100%\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent={{ base: \"space-between\" }}\n            alignItems=\"center\"\n          >\n            <IconButton\n              d={{ base: \"flex\", md: \"none\" }}\n              icon={<ArrowBackIcon />}\n              onClick={() => setSelectedChat(\"\")}\n            />\n            {messages &&\n              (!selectedChat.isGroupChat ? (\n                <>\n                  {getSender(user, selectedChat.users)}\n                  <ProfileModal\n                    user={getSenderFull(user, selectedChat.users)}\n                  />\n                </>\n              ) : (\n                <>\n                  {selectedChat.chatName.toUpperCase()}\n                  <UpdateGroupChatModal\n                    fetchMessages={fetchMessages}\n                    fetchAgain={fetchAgain}\n                    setFetchAgain={setFetchAgain}\n                  />\n                </>\n              ))}\n          </Text>\n          <Box\n            d=\"flex\"\n            flexDir=\"column\"\n            justifyContent=\"flex-end\"\n            p={3}\n            bg=\"#E8E8E8\"\n            w=\"100%\"\n            h=\"100%\"\n            borderRadius=\"lg\"\n            overflowY=\"hidden\"\n          >\n            {loading ? (\n              <Spinner\n                size=\"xl\"\n                w={20}\n                h={20}\n                alignSelf=\"center\"\n                margin=\"auto\"\n              />\n            ) : (\n              <div className=\"messages\">\n                <ScrollableChat messages={messages} />\n              </div>\n            )}\n\n            <FormControl\n              onKeyDown={sendMessage}\n              id=\"first-name\"\n              isRequired\n              mt={3}\n            >\n              {istyping ? (\n                <div>\n                  <Lottie\n                    options={defaultOptions}\n                    // height={50}\n                    width={70}\n                    style={{ marginBottom: 15, marginLeft: 0 }}\n                  />\n                </div>\n              ) : (\n                <></>\n              )}\n              <Input\n                variant=\"filled\"\n                bg=\"#E0E0E0\"\n                placeholder=\"Enter a message..\"\n                value={newMessage}\n                onChange={typingHandler}\n              />\n            </FormControl>\n          </Box>\n        </>\n      ) : (\n        // to get socket.io on same page\n        <Box d=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\n            Click on a user to start chatting\n          </Text>\n        </Box>\n      )}\n    </>\n  );\n};\n\nexport default SingleChat;\n","export const isSameSenderMargin = (messages, m, i, userId) => {\n  // console.log(i === messages.length - 1);\n\n  if (\n    i < messages.length - 1 &&\n    messages[i + 1].sender._id === m.sender._id &&\n    messages[i].sender._id !== userId\n  )\n    return 33;\n  else if (\n    (i < messages.length - 1 &&\n      messages[i + 1].sender._id !== m.sender._id &&\n      messages[i].sender._id !== userId) ||\n    (i === messages.length - 1 && messages[i].sender._id !== userId)\n  )\n    return 0;\n  else return \"auto\";\n};\n\nexport const isSameSender = (messages, m, i, userId) => {\n  return (\n    i < messages.length - 1 &&\n    (messages[i + 1].sender._id !== m.sender._id ||\n      messages[i + 1].sender._id === undefined) &&\n    messages[i].sender._id !== userId\n  );\n};\n\nexport const isLastMessage = (messages, i, userId) => {\n  return (\n    i === messages.length - 1 &&\n    messages[messages.length - 1].sender._id !== userId &&\n    messages[messages.length - 1].sender._id\n  );\n};\n\nexport const isSameUser = (messages, m, i) => {\n  return i > 0 && messages[i - 1].sender._id === m.sender._id;\n};\n\nexport const getSender = (loggedUser, users) => {\n  return users[0]?._id === loggedUser?._id ? users[1].name : users[0].name;\n};\n\nexport const getSenderFull = (loggedUser, users) => {\n  return users[0]._id === loggedUser._id ? users[1] : users[0];\n};\n","import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  IconButton,\n  Text,\n  Image,\n} from \"@chakra-ui/react\";\n\nconst ProfileModal = ({ user, children }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <>\n      {children ? (\n        <span onClick={onOpen}>{children}</span>\n      ) : (\n        <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\n      )}\n      <Modal size=\"lg\" onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent h=\"410px\">\n          <ModalHeader\n            fontSize=\"40px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            {user.name}\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody\n            d=\"flex\"\n            flexDir=\"column\"\n            alignItems=\"center\"\n            justifyContent=\"space-between\"\n          >\n            <Image\n              borderRadius=\"full\"\n              boxSize=\"150px\"\n              src={user.pic}\n              alt={user.name}\n            />\n            <Text\n              fontSize={{ base: \"28px\", md: \"30px\" }}\n              fontFamily=\"Work sans\"\n            >\n              Email: {user.email}\n            </Text>\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={onClose}>Close</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default ProfileModal;\n","import { Avatar } from \"@chakra-ui/avatar\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport ScrollableFeed from \"react-scrollable-feed\";\nimport {\n  isLastMessage,\n  isSameSender,\n  isSameSenderMargin,\n  isSameUser,\n} from \"../config/ChatLogics\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst ScrollableChat = ({ messages }) => {\n  const { user } = ChatState();\n\n  return (\n    <ScrollableFeed>\n      {messages &&\n        messages.map((m, i) => (\n          <div style={{ display: \"flex\" }} key={m._id}>\n            {(isSameSender(messages, m, i, user._id) ||\n              isLastMessage(messages, i, user._id)) && (\n              <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\n                <Avatar\n                  mt=\"7px\"\n                  mr={1}\n                  size=\"sm\"\n                  cursor=\"pointer\"\n                  name={m.sender.name}\n                  src={m.sender.pic}\n                />\n              </Tooltip>\n            )}\n            <span\n              style={{\n                backgroundColor: `${\n                  m.sender._id === user._id ? \"#BEE3F8\" : \"#B9F5D0\"\n                }`,\n                marginLeft: isSameSenderMargin(messages, m, i, user._id),\n                marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\n                borderRadius: \"20px\",\n                padding: \"5px 15px\",\n                maxWidth: \"75%\",\n              }}\n            >\n              {m.content}\n            </span>\n          </div>\n        ))}\n    </ScrollableFeed>\n  );\n};\n\nexport default ScrollableChat;\n","import { CloseIcon } from \"@chakra-ui/icons\";\nimport { Badge } from \"@chakra-ui/layout\";\n\nconst UserBadgeItem = ({ user, handleFunction, admin }) => {\n  return (\n    <Badge\n      px={2}\n      py={1}\n      borderRadius=\"lg\"\n      m={1}\n      mb={2}\n      variant=\"solid\"\n      fontSize={12}\n      colorScheme=\"purple\"\n      cursor=\"pointer\"\n      onClick={handleFunction}\n    >\n      {user.name}\n      {admin === user._id && <span> (Admin)</span>}\n      <CloseIcon pl={1} />\n    </Badge>\n  );\n};\n\nexport default UserBadgeItem;\n","import { Avatar } from \"@chakra-ui/avatar\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nconst UserListItem = ({user, handleFunction }) => {\n  //const { user } = ChatState();\n\n  return (\n    <Box\n      onClick={handleFunction}\n      cursor=\"pointer\"\n      bg=\"#E8E8E8\"\n      _hover={{\n        background: \"#38B2AC\",\n        color: \"white\",\n      }}\n      w=\"100%\"\n      d=\"flex\"\n      alignItems=\"center\"\n      color=\"black\"\n      px={3}\n      py={2}\n      mb={2}\n      borderRadius=\"lg\"\n    >\n      <Avatar\n        mr={2}\n        size=\"sm\"\n        cursor=\"pointer\"\n        name={user.name}\n        src={user.pic}\n      />\n      <Box>\n        <Text>{user.name}</Text>\n        <Text fontSize=\"xs\">\n          <b>Email : </b>\n          {user.email}\n        </Text>\n      </Box>\n    </Box>\n  );\n};\n\nexport default UserListItem;\n","import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  FormControl,\n  Input,\n  useToast,\n  Box,\n  IconButton,\n  Spinner,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\nimport UserListItem from \"../userAvatar/UserListItem\";\n\nconst UpdateGroupChatModal = ({ fetchMessages, fetchAgain, setFetchAgain }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [groupChatName, setGroupChatName] = useState();\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [renameloading, setRenameLoading] = useState(false);\n  const toast = useToast();\n\n  const { selectedChat, setSelectedChat, user } = ChatState();\n\n  const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n      console.log(data);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n      setLoading(false);\n    }\n  };\n\n  const handleRename = async () => {\n    if (!groupChatName) return;\n\n    try {\n      setRenameLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/rename`,\n        {\n          chatId: selectedChat._id,\n          chatName: groupChatName,\n        },\n        config\n      );\n\n      console.log(data._id);\n      // setSelectedChat(\"\");\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setRenameLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setRenameLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  const handleAddUser = async (user1) => {\n    if (selectedChat.users.find((u) => u._id === user1._id)) {\n      toast({\n        title: \"User Already in group!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    if (selectedChat.groupAdmin._id !== user._id) {\n      toast({\n        title: \"Only admins can add someone!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/groupadd`,\n        {\n          chatId: selectedChat._id,\n          userId: user1._id,\n        },\n        config\n      );\n\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  const handleRemove = async (user1) => {\n    if (selectedChat.groupAdmin._id !== user._id && user1._id !== user._id) {\n      toast({\n        title: \"Only admins can remove someone!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/groupremove`,\n        {\n          chatId: selectedChat._id,\n          userId: user1._id,\n        },\n        config\n      );\n\n      user1._id === user._id ? setSelectedChat() : setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      fetchMessages();\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  return (\n    <>\n      <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader\n            fontSize=\"35px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            {selectedChat.chatName}\n          </ModalHeader>\n\n          <ModalCloseButton />\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\" pb={3}>\n              {selectedChat.users.map((u) => (\n                <UserBadgeItem\n                  key={u._id}\n                  user={u}\n                  admin={selectedChat.groupAdmin}\n                  handleFunction={() => handleRemove(u)}\n                />\n              ))}\n            </Box>\n            <FormControl d=\"flex\">\n              <Input\n                placeholder=\"Chat Name\"\n                mb={3}\n                value={groupChatName}\n                onChange={(e) => setGroupChatName(e.target.value)}\n              />\n              <Button\n                variant=\"solid\"\n                colorScheme=\"teal\"\n                ml={1}\n                isLoading={renameloading}\n                onClick={handleRename}\n              >\n                Update\n              </Button>\n            </FormControl>\n            <FormControl>\n              <Input\n                placeholder=\"Add User to group\"\n                mb={1}\n                onChange={(e) => handleSearch(e.target.value)}\n              />\n            </FormControl>\n\n            {loading ? (\n              <Spinner size=\"lg\" />\n            ) : (\n              searchResult?.map((user) => (\n                <UserListItem\n                  key={user._id}\n                  user={user}\n                  handleFunction={() => handleAddUser(user)}\n                />\n              ))\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={() => handleRemove(user)} colorScheme=\"red\">\n              Leave Group\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default UpdateGroupChatModal;\n","import { Box } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport SingleChat from \"./SingleChat\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst Chatbox = ({ fetchAgain, setFetchAgain }) => {\n  const { selectedChat } = ChatState();\n\n  return (\n    <Box\n      d={{ base: selectedChat ? \"flex\" : \"none\", md: \"flex\" }}\n      alignItems=\"center\"\n      flexDir=\"column\"\n      p={3}\n      bg=\"white\"\n      w={{ base: \"100%\", md: \"68%\" }}\n      borderRadius=\"lg\"\n      borderWidth=\"1px\"\n    >\n      <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n    </Box>\n  );\n};\n\nexport default Chatbox;\n","import { Stack } from \"@chakra-ui/layout\";\nimport { Skeleton } from \"@chakra-ui/skeleton\";\n\nconst ChatLoading = () => {\n  return (\n    <Stack>\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n    </Stack>\n  );\n};\n\nexport default ChatLoading;\n","import {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  FormControl,\n  Input,\n  useToast,\n  Box,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\nimport UserListItem from \"../userAvatar/UserListItem\";\n\nconst GroupChatModal = ({ children }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [groupChatName, setGroupChatName] = useState();\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const toast = useToast();\n\n  const { user, chats, setChats } = ChatState();\n\n  const handleGroup = (userToAdd) => {\n    if (selectedUsers.includes(userToAdd)) {\n      toast({\n        title: \"User already added\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    setSelectedUsers([...selectedUsers, userToAdd]);\n  };\n\n  const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n      console.log(data);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const handleDelete = (delUser) => {\n    setSelectedUsers(selectedUsers.filter((sel) => sel._id !== delUser._id));\n  };\n\n  const handleSubmit = async () => {\n    if (!groupChatName || !selectedUsers) {\n      toast({\n        title: \"Please fill all the feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.post(\n        `/api/chat/group`,\n        {\n          name: groupChatName,\n          users: JSON.stringify(selectedUsers.map((u) => u._id)),\n        },\n        config\n      );\n      setChats([data, ...chats]);\n      onClose();\n      toast({\n        title: \"New Group Chat Created!\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Failed to Create the Chat!\",\n        description: error.response.data,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  return (\n    <>\n      <span onClick={onOpen}>{children}</span>\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader\n            fontSize={{ base: \"2xl\", md: \"3xl\" }}\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            Create Group\n          </ModalHeader>\n          <ModalCloseButton backgroundColor=\"#E34632\" color=\"#fff\" />\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\n            <FormControl>\n              <Input\n                placeholder=\"Chat Name\"\n                mb={3}\n                onChange={(e) => setGroupChatName(e.target.value)}\n              />\n            </FormControl>\n            <FormControl>\n              <Input\n                placeholder=\"Add Users eg: John, Piyush, Jane\"\n                mb={1}\n                onChange={(e) => handleSearch(e.target.value)}\n              />\n            </FormControl>\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\">\n              {selectedUsers.map((u) => (\n                <UserBadgeItem\n                  key={u._id}\n                  user={u}\n                  handleFunction={() => handleDelete(u)}\n                />\n              ))}\n            </Box>\n            {loading ? (\n              // <ChatLoading />\n              <div>Loading...</div>\n            ) : (\n              searchResult\n                ?.slice(0, 4)\n                .map((user) => (\n                  <UserListItem\n                    key={user._id}\n                    user={user}\n                    handleFunction={() => handleGroup(user)}\n                  />\n                ))\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button\n              onClick={handleSubmit}\n              backgroundColor=\"#18E2AB\"\n              color=\"#fff\"\n            >\n              Create Chat\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default GroupChatModal;\n","import { AddIcon } from \"@chakra-ui/icons\";\nimport { Box, Stack, Text } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { getSender } from \"../config/ChatLogics\";\nimport ChatLoading from \"./ChatLoading\";\nimport GroupChatModal from \"./miscellaneous/GroupChatModal\";\nimport { Button, IconButton,Image,Flex } from \"@chakra-ui/react\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst MyChats = ({ fetchAgain }) => {\n  const [loggedUser, setLoggedUser] = useState();\n\n  const { selectedChat, setSelectedChat, user, chats, setChats } = ChatState();\n  console.log(chats)\n\n  const toast = useToast();\n\n\n  const fetchChats = async () => {\n    // console.log(user._id);\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(\"/api/chat\", config);\n      setChats(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the chats\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\n    fetchChats();\n    // eslint-disable-next-line\n  }, [fetchAgain]);\n\n  return (\n    <Box\n      display={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\n      flexDir=\"column\"\n      alignItems=\"center\"\n      p={0}\n      bg=\"#0E2036\"\n      w={{ base: \"100%\", md: \"31%\" }}\n      borderRadius=\"lg\"\n      borderWidth={{ base: \"unset\", md: \"1px\" }}\n      maxW={{ base: \"100%\", md: \"31%\" }} // Set max width to 100% for mobile and 31% for larger screens\n      flexGrow={{ base: 1, md: \"unset\" }}\n    >\n      <Box\n        pb={3}\n        px={3}\n        fontSize={{ base: \"25px\", md: \"30px\" }}\n        fontFamily=\"Work sans\"\n        display=\"flex\"\n        w=\"100%\"\n        color=\"#fff\"\n        backgroundColor=\"#0E2036\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n      >\n        Messages\n        <GroupChatModal>\n          <IconButton\n            display=\"flex\"\n            backgroundColor=\"#18E2AB\"\n            color=\"#fff\"\n            marginTop={2}\n            fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\n            icon={<AddIcon />}\n          ></IconButton>\n        </GroupChatModal>\n      </Box>\n      <Box\n        display=\"flex\"\n        flexDir=\"column\"\n        p={3}\n        bg=\"#0E2036\"\n        w=\"100%\" // Set width to 100% for both mobile and larger screens\n        flexGrow=\"1\" // Use flexGrow to make it fill the available space\n        overflowY=\"hidden\"\n      >\n        {chats ? (\n          <Stack overflowY=\"scroll\">\n            {chats.map((chat) => (\n              <Box\n                onClick={() => setSelectedChat(chat)}\n                cursor=\"pointer\"\n                bg={selectedChat === chat ? \"#38B2AC\" : \"#E8E8E8\"}\n                color={selectedChat === chat ? \"white\" : \"black\"}\n                display=\"flex\" // Use display=\"flex\" instead of flexDirection=\"row\"\n                alignItems=\"center\"\n                al\n                px={3}\n                py={2}\n                borderRadius=\"lg\"\n                key={chat._id}\n              >\n                <Box flexDirection=\"column\">\n                  <Image\n                    borderRadius=\"full\"\n                    boxSize=\"30px\"\n                    marginRight={2}\n                    src={\n                      chat.users[0].pic !== user.pic\n                        ? chat.users[0].pic\n                        : chat.users[1].pic\n                    }\n                    alt={user.name}\n                  />\n                </Box>\n                <Box flexDirection=\"column\">\n                  <Text isTruncated maxWidth=\"200px\">\n                    {!chat.isGroupChat\n                      ? getSender(loggedUser, chat.users)\n                      : chat.chatName}\n                  </Text>\n\n                  {chat.latestMessage && (\n                    <Text fontSize=\"xs\" isTruncated maxWidth=\"200px\">\n                      <b>{chat.latestMessage.sender.name} : </b>\n                      {chat.latestMessage.content.length > 50\n                        ? chat.latestMessage.content.substring(0, 51) + \"...\"\n                        : chat.latestMessage.content}\n                    </Text>\n                  )}\n                </Box>\n              </Box>\n            ))}\n          </Stack>\n        ) : (\n          <ChatLoading />\n        )}\n      </Box>\n    </Box>\n  );\n};\n\nexport default MyChats;\n","import { Button } from \"@chakra-ui/button\";\nimport { useDisclosure } from \"@chakra-ui/hooks\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport {\n  Menu,\n  MenuButton,\n  MenuDivider,\n  MenuItem,\n  MenuList,\n} from \"@chakra-ui/menu\";\nimport {\n  Drawer,\n  DrawerBody,\n  DrawerContent,\n  DrawerHeader,\n  DrawerOverlay,\n} from \"@chakra-ui/modal\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\nimport { Avatar } from \"@chakra-ui/avatar\";\nimport { useHistory } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport ChatLoading from \"../ChatLoading\";\nimport { Spinner } from \"@chakra-ui/spinner\";\nimport ProfileModal from \"./ProfileModal\";\nimport NotificationBadge from \"react-notification-badge\";\nimport { Effect } from \"react-notification-badge\";\nimport { getSender } from \"../../config/ChatLogics\";\nimport UserListItem from \"../userAvatar/UserListItem\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nfunction SideDrawer() {\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [loadingChat, setLoadingChat] = useState(false);\n\n  const {\n    setSelectedChat,\n    user,\n    notification,\n    setNotification,\n    chats,\n    setChats,\n  } = ChatState();\n\n  const toast = useToast();\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const history = useHistory();\n\n  const logoutHandler = () => {\n    localStorage.removeItem(\"userInfo\");\n    history.push(\"/\");\n  };\n\n  const handleSearch = async () => {\n    if (!search) {\n      toast({\n        title: \"Please Enter something in search\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top-left\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const accessChat = async (userId) => {\n    console.log(userId);\n\n    try {\n      setLoadingChat(true);\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.post(`/api/chat`, { userId }, config);\n\n      if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\n      setSelectedChat(data);\n      setLoadingChat(false);\n      onClose();\n    } catch (error) {\n      toast({\n        title: \"Error fetching the chat\",\n        description: error.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  return (\n    <>\n      <Box\n        display=\"flex\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        bg=\"white\"\n        w=\"100%\"\n        p=\"5px 10px 5px 10px\"\n        borderWidth=\"5px\"\n      >\n        <Tooltip label=\"Search Users to chat\" hasArrow placement=\"bottom-end\">\n          <Button variant=\"ghost\" onClick={onOpen}>\n            <i className=\"fas fa-search\"></i>\n            <Text display={{ base: \"none\", md: \"flex\" }} px={4}>\n              Search User\n            </Text>\n          </Button>\n        </Tooltip>\n        <Text fontSize={{ base: \"3xl\", md: \"3xl\" }} fontFamily=\"Anton\">\n          onbvn\n        </Text>\n        <div>\n          <Menu>\n            <MenuButton p={1}>\n              <NotificationBadge\n                count={notification.length}\n                effect={Effect.SCALE}\n              />\n              <BellIcon fontSize=\"2xl\" m={1} />\n            </MenuButton>\n            <MenuList pl={2}>\n              {!notification.length && \"No New Messages\"}\n              {notification.map((notif) => (\n                <MenuItem\n                  key={notif._id}\n                  onClick={() => {\n                    setSelectedChat(notif.chat);\n                    setNotification(notification.filter((n) => n !== notif));\n                  }}\n                >\n                  {notif.chat.isGroupChat\n                    ? `New Message in ${notif.chat.chatName}`\n                    : `New Message from ${getSender(user, notif.chat.users)}`}\n                </MenuItem>\n              ))}\n            </MenuList>\n          </Menu>\n          <Menu>\n            <MenuButton as={Button} bg=\"white\" rightIcon={<ChevronDownIcon />}>\n              <Avatar\n                size=\"sm\"\n                cursor=\"pointer\"\n                name={user.name}\n                src={user.pic}\n              />\n            </MenuButton>\n            <MenuList>\n              <ProfileModal user={user}>\n                <MenuItem>My Profile</MenuItem>{\" \"}\n              </ProfileModal>\n              <MenuDivider />\n              <MenuItem onClick={logoutHandler}>Logout</MenuItem>\n            </MenuList>\n          </Menu>\n        </div>\n      </Box>\n\n      <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerHeader borderBottomWidth=\"1px\">Search Users</DrawerHeader>\n          <DrawerBody>\n            <Box d=\"flex\" pb={2}>\n              <Input\n                placeholder=\"Search by name or email\"\n                mr={2}\n                value={search}\n                onChange={(e) => setSearch(e.target.value)}\n              />\n              <Button onClick={handleSearch}>Go</Button>\n            </Box>\n            {loading ? (\n              <ChatLoading />\n            ) : (\n              searchResult?.map((user) => (\n                <UserListItem\n                  key={user._id}\n                  user={user}\n                  handleFunction={() => accessChat(user._id)}\n                />\n              ))\n            )}\n            {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\n          </DrawerBody>\n        </DrawerContent>\n      </Drawer>\n    </>\n  );\n}\n\nexport default SideDrawer;\n","import { Box } from \"@chakra-ui/layout\";\nimport { useState } from \"react\";\nimport Chatbox from \"../components/Chatbox\";\nimport MyChats from \"../components/MyChats\";\nimport SideDrawer from \"../components/miscellaneous/SideDrawer\";\nimport { ChatState } from \"../Context/ChatProvider\";\nimport { Global, css } from \"@emotion/react\";\n\n\n\n\nconst Chatpage = () => {\n  const [fetchAgain, setFetchAgain] = useState(false);\n  const { user } = ChatState();\n\n\n  return (\n    <>\n      <Global\n        styles={css`\n          html {\n            overflow: hidden;\n          }\n          body {\n            overflow: hidden;\n            height: 100vh;\n          }\n        `}\n      />\n      <div style={{ width: \"100%\" }}>\n        {user && <SideDrawer />}\n        <Box\n          display=\"flex\"\n          justifyContent=\"space-between\"\n          w=\"100%\"\n          h=\"91.5vh\"\n          p={{ base: 0, md: \"10px\" }}\n        >\n          {user && <MyChats fetchAgain={fetchAgain} />}\n          {user && (\n            <Chatbox fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n          )}\n        </Box>\n      </div>\n    </>\n  );\n};\n\nexport default Chatpage;\n","\r\nimport { initializeApp } from \"firebase/app\";\r\nimport { getAnalytics } from \"firebase/analytics\";\r\nimport { getMessaging } from \"firebase/messaging\";\r\n\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyC7SNBAK2H-Vi9c7IWeDihxIzS-qJcZEd0\",\r\n  authDomain: \"onbvn-notification.firebaseapp.com\",\r\n  projectId: \"onbvn-notification\",\r\n  storageBucket: \"onbvn-notification.appspot.com\",\r\n  messagingSenderId: \"567593922264\",\r\n  appId: \"1:567593922264:web:a49f0b1152b1628b6471ad\",\r\n  measurementId: \"G-KHL4T0LNME\",\r\n};\r\n\r\n// Initialize Firebase\r\nexport const app = initializeApp(firebaseConfig);\r\nexport const analytics = getAnalytics(app);\r\nexport const messaging = getMessaging(app);","import \"./App.css\";\nimport Homepage from \"./Pages/Homepage\";\nimport { Route } from \"react-router-dom\";\nimport Chatpage from \"./Pages/Chatpage\";\nimport { useEffect } from \"react\";\nimport { messaging } from \"./firebase\";\nimport { getToken } from \"firebase/messaging\";\nimport push from \"push.js\"; \n\n\nfunction App() {\n\n\n\n\n  return (\n    <div className=\"App\">\n      \n      <Route path=\"/\" component={Homepage} exact />\n      <Route path=\"/chats\" component={Chatpage} />\n    </div>\n  );\n}\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport ChatProvider from \"./Context/ChatProvider\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <ChakraProvider>\n    <BrowserRouter>\n      <ChatProvider>\n        <App />\n      </ChatProvider>\n    </BrowserRouter>\n  </ChakraProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}